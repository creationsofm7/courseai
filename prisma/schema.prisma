datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
  
  }
generator client {
provider = "prisma-client-js"
previewFeatures = ["driverAdapters"]
}

generator accelerate {
  provider = "@prisma/accelerate"
}

model User {
id String @id @default(auto()) @map("_id") @db.ObjectId
name String?
email String? @unique
emailVerified DateTime?
image String?
accounts Account[]
sessions Session[]
Authenticator Authenticator[]
courses Course[]
premium Boolean @default(false)
darkMode Boolean @default(false)

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Account {
id String @id @default(auto()) @map("_id") @db.ObjectId
userId String @db.ObjectId
type String
provider String
providerAccountId String
refresh_token String? @db.String
access_token String? @db.String
expires_at Int?
token_type String?
scope String?
id_token String? @db.String
session_state String?
premium Boolean?

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([provider, providerAccountId])
}

model Session {
id String @id @default(auto()) @map("_id") @db.ObjectId
sessionToken String @unique
userId String @db.ObjectId
expires DateTime
user User @relation(fields: [userId], references: [id], onDelete: Cascade)

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model VerificationToken {
id String @id @default(auto()) @map("_id") @db.ObjectId
identifier String
token String
expires DateTime

@@unique([identifier, token])
}

model Authenticator {
credentialID String @id @map("_id")
userId String @db.ObjectId
providerAccountId String
credentialPublicKey String
counter Int
credentialDeviceType String
credentialBackedUp Boolean
transports String?

user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([userId, credentialID])
}

model Course {
id String @id @default(auto()) @map("_id") @db.ObjectId
userId String @db.ObjectId
name String?
description String?
image String?
url String?
tags String[]
completed Boolean @default(false)
progress Int @default(0)
modules Module[]

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Module {
id String @id @default(auto()) @map("_id") @db.ObjectId
title String
courseId String @db.ObjectId
course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
resources Resource[]
}

model Resource {
id String @id @default(auto()) @map("_id") @db.ObjectId
title String
videoUrl String
moduleId String @db.ObjectId
module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}